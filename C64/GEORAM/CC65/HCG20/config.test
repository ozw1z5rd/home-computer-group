SYMBOLS { 
	__LOADADDR__:      type = import; 
	__EXEHDR__:        type = import;
	__STACKSIZE__:     type = weak value = $0800;
	__OVERLAYSIZE__:   type = weak value = $1000;
}

MEMORY { 
	ZP:		file = "", define = yes, start = $0002, size = $001A;

        # where the load address is located --> $0801 - 2 = $07ff =>  %S - 2
        # the address is 2 bytes
	LOADADDR:	file = %O, start = $0801 - 2, size = $0002; 

        # basic header to start the program ( 10 sys 2061 ) starts after the address 13 bytes $0D
	HEADER:		file = %O, start = $0801, size = $000D;

        # where our code is loaded, the __HEADER_LAST__ is make available by cc65 -> __<LABEL>_LAST__
	MAIN:		file = %O, define = yes, start = __HEADER_LAST__, size = __OVERLAYSTART__ - __HEADER_LAST__;

	BSS:		file = "", start = __ONCE_RUN__, size = __OVERLAYSIZE__ - __STACKSIZE__ - __ONCE_RUN__; 

	OVL1:		file = "%O.1" start = $D000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__; 
	OVL2:		file = "%O.2" start = $D000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
}

SEGMENTS { 
	LOADADDR: 	load = LOADADDR,  type = ro; 
	EXEHDR:		load = HEADER,    type = ro;
	STARTUP:	load = MAIN,      type = ro;
	LOWCODE: 	load = MAIN,      type = ro, optional = yes;
	INIT:        	load = MAIN,      type = rw;
	CODE:           load = MAIN,      type = ro;

	OVL1CODE:       load = OVL1,     type = ro, define = yes, optional = yes;
	OVL2CODE:       load = OVL2,     type = ro, define = yes, optional = yes;

	RODATA:         load = MAIN,    type = ro; 
	DATA:           load = MAIN,    type = rw;
	BSS:            load = BSS,      type = bss, define = yes;
	ZEROPAGE:       load = ZP,       type = zp;
} 

FEATURES {

    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}

